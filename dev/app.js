String.prototype.toUnderscore = function() {
  var string = this.replace(/([A-Z])/g, function($1){return "_"+$1.toLowerCase();});

  if (string.indexOf('_') == 0) { 
    string = string.substr(1);
  }

  return string; 
};

Math.getRandomInt = function(min, max) {
  return Math.floor(Math.random() * (max - min + 1)) + min;
}
/* Ember Configuration */

var APP_CONFIG = {
  INIT: {
    LOG_TRANSITIONS:            false,
    LOG_TRANSITIONS_INTERNAL:   false,
  },
  DATA: {
    API_NAMESPACE: 'v1',
    ADAPTER: 'fixture', // or, rest
    FIXTURES_ENABLED: {
      STORAGE_SURVEYS:  false,
      USERS:            false,
      STORAGES:         false,
      SOURCES:          false,
      CONTENT_TYPES:    false
    }
  },
  SIMULATIONS_ENABLED: true
}
/* Ember Init */

App = Ember.Application.create(APP_CONFIG.INIT);

App.Router.map(function() {
  this.route('index', { path: '/' });
  this.route('sources', { path: '/sources' });
  this.route('sync', { path: '/sync' });
});

Ember.Route.reopen({
  events: {
    willTransition: function(transition) {
      this.controllerFor('application').set('targetPath', transition.targetName);

      if (transition.targetName != this.controllerFor('application').get('currentPath')) {
        this.controllerFor('application').handleTransitionStart();
      }
    }
  },

  afterModel: function() {
    // Always scroll to top of window after route transition
    window.scrollTo(0, 0);
    
    this.controllerFor('application').set('targetPath', null);
    this.controllerFor('application').handleTransitionStop();
  }
});

Ember.Application.initializer({
  name: 'session',

  initialize: function(container) {
    App.deferReadiness();
    var store = container.lookup('store:main');
    var initializer = this;
    var user;

    var loadSources = function() {
      var deferred = $.Deferred();
      var promises = [];

      var sources = user.get('sources').then(function(sources) {
        loadContentTypes(sources).then(function() {
          deferred.resolve();
        });
      });

      return deferred.promise();
    };

    var loadContentTypes = function(sources) {
      var deferred = $.Deferred();
      var promises = [];
      
      sources.forEach(function(source) {
        promises.push(loadContentTypesForSource(source));
      });

      $.when.apply($, promises).then(function() {
        deferred.resolve();
      });

      return deferred.promise();
    };

    var loadContentTypesForSource = function(source) {
      var deferred = $.Deferred();

      source.get('contentTypes').then(function(contentTypes) {
        deferred.resolve();
      });

      return deferred.promise();
    };

    return store.find('user').then(function(users) {
      user = users.get('firstObject');

      if (user) {
        container.lookup('controller:session').set('user', user);

        loadSources(user).then(function() {
          App.advanceReadiness();
        });
      } else {
        App.advanceReadiness();
      }
    });
  }
});
/* Ember Data Init */

DS.RESTAdapter.reopen({
  // Prefix for all API paths generated by Ember Data 
  namespace: APP_CONFIG.DATA.API_NAMESPACE,

  // Ensure all Ember Data API URLs are generated with underscores (eg /v1/storage_survey)
  pathForType: function(type) {
    var underscored = Ember.String.underscore(type)
    return Ember.String.pluralize(underscored);
  }
});

App.ApplicationSerializer = DS.RESTSerializer.extend({
  // Ensure Ember Data expects root variables within API responses to use underscores (eg "storage_survey")
  typeForRoot: function(root) {
    var camelized = Ember.String.camelize(root);
    return Ember.String.singularize(camelized);
  }
});

App.FixtureAdapter = DS.FixtureAdapter.extend({
});

App.Store = DS.Store.extend({
  adapter: APP_CONFIG.DATA.ADAPTER
});

/* Ember Data bug fix to enable successful saving of one-to-many relationships. 
 *
 * See: http://stackoverflow.com/questions/19093078/ember-data-saving-record-loses-has-many-relationships 
 */
DS.JSONSerializer.reopen({
  serializeHasMany : function(record, json, relationship) {
    var key = relationship.key;
    var relationshipType = DS.RelationshipChange.determineRelationshipType(record.constructor, relationship);

    if (relationshipType === 'manyToNone'
      || relationshipType === 'manyToMany'
      || relationshipType === 'manyToOne') {
      json[key] = Ember.get(record, key).mapBy('id');
    }
  }
});
App.ContentType = DS.Model.extend({
  type:                 DS.attr('string'),
  name:                 DS.attr('string'),
  totalItemsAvailable:  DS.attr('number', { defaultValue: 0 }),
  totalItemsSynced:     DS.attr('number', { defaultValue: 0 }),
  isSyncing:            DS.attr('boolean', { defaultValue: false }),
  source:               DS.belongsTo('source')
});

if (APP_CONFIG.DATA.FIXTURES_ENABLED.CONTENT_TYPES) {
  App.ContentType.FIXTURES = [
    {
      id: 6,
      type: 'status_update',
      name: 'Status Update',
      source: 4
    },
    {
      id: 7,
      type: 'link',
      name: 'Link',
      source: 4
    },
    {
      id: 8,
      type: 'check_in',
      name: 'Check-in',
      source: 4
    },
    {
      id: 9,
      type: 'photo',
      name: 'Photo',
      source: 4
    },
    {
      id: 10,
      type: 'photo',
      name: 'Photo',
      source: 5
    },
    {
      id: 11,
      type: 'like',
      name: 'Like',
      source: 5
    }
  ];
} else {
  App.ContentType.FIXTURES = [];
}
App.Source = DS.Model.extend({
  type:                 DS.attr('string'),
  name:                 DS.attr('string'),
  totalItemsSynced:     DS.attr('string'),
  totalItemsAvailable:  DS.attr('string'),
  lastCompletedSync:    DS.attr('date'),
  isSyncing:            DS.attr('boolean', { defaultValue: false }),
  user:                 DS.belongsTo('user'),
  contentTypes:         DS.hasMany('contentType', { async: true }),

  totalContentTypes: function() {
    return this.get('contentTypes').get('length');
	}.property('contentTypes.@each')
});

if (APP_CONFIG.DATA.FIXTURES_ENABLED.SOURCES) {
  App.Source.FIXTURES = [
    {
      id: 4,
      type: 'facebook',
      name: 'Facebook',
      user: 3
    },
    {
      id: 5,
      type: 'instagram',
      name: 'Instagram',
      user: 3
    }
  ];

  if (APP_CONFIG.DATA.FIXTURES_ENABLED.CONTENT_TYPES) {
    App.Source.FIXTURES[0].contentTypes = [6,7,8,9];
    App.Source.FIXTURES[1].contentTypes = [10,11];
  }
} else {
  App.Source.FIXTURES = [];
}
App.SourcesMenu = Ember.Object.extend({
  totalConnectedSources: function() {
    var total = 0;
    $.each(this.get('items'), function(key, item) {
      if (item.get('connected')) {
        total = total + 1;
      }
    });
    return total;
  }.property('this.items.@each.connected'),

  totalEnabledContentTypes: function() {
    var total = 0;
    $.each(this.get('items'), function(key, item) {
      if (item.get('totalEnabledContentTypes')) {
        total = total + item.get('totalEnabledContentTypes');
      }
    });
    return total;
  }.property('this.items.@each.totalEnabledContentTypes'),

  init: function() {
    this._super();

    this.set('isDirty', false);

    var user = this.get('user');
    var items = [];

    items.push(App.SourcesMenuItem.create(
      { 
        type: 'facebook',
        name: 'Facebook',
        connected: user.sourceConnected('facebook'),
        contentTypes: [
          Ember.Object.create({
            type: 'status_update',
            name: 'Status Update',
            enabled: user.contentTypeEnabled('facebook', 'status_update')
          }),
          Ember.Object.create({
            type: 'link',
            name: 'Link',
            enabled: user.contentTypeEnabled('facebook', 'link')
          }),
          Ember.Object.create({
            type: 'check_in',
            name: 'Check-in',
            enabled: user.contentTypeEnabled('facebook', 'check_in')
          }),
          Ember.Object.create({
            type: 'photo',
            name: 'Photo',
            enabled: user.contentTypeEnabled('facebook', 'photo')
          })
        ]
      }
    ));

    items.push(App.SourcesMenuItem.create(
      { 
        type: 'twitter',
        name: 'Twitter',
        connected: user.sourceConnected('twitter'),
        contentTypes: [
          Ember.Object.create({
            type: 'tweet',
            name: 'Tweet',
            enabled: user.contentTypeEnabled('twitter', 'tweet')
          }),
          Ember.Object.create({
            type: 'favorite',
            name: 'Favorite',
            enabled: user.contentTypeEnabled('twitter', 'favorite')
          }),
          Ember.Object.create({
            type: 'retweet',
            name: 'Retweet',
            enabled: user.contentTypeEnabled('twitter', 'retweet')
          }),
          Ember.Object.create({
            type: 'direct_message',
            name: 'Direct Message',
            enabled: user.contentTypeEnabled('twitter', 'direct_message')
          })
        ]
      }
    ));

    items.push(App.SourcesMenuItem.create(
      { 
        type: 'instagram',
        name: 'Instagram',
        connected: user.sourceConnected('instagram'),
        contentTypes: [
          Ember.Object.create({
            type: 'photo',
            name: 'Photo',
            enabled: user.contentTypeEnabled('instagram', 'photo')
          }),
          Ember.Object.create({
            type: 'video',
            name: 'Video',
            enabled: user.contentTypeEnabled('instagram', 'video')
          }),
          Ember.Object.create({
            type: 'like',
            name: 'Like',
            enabled: user.contentTypeEnabled('instagram', 'like')
          })
        ]
      }
    ));

    items.push(App.SourcesMenuItem.create(
      { 
        type: 'foursquare',
        name: 'Foursquare',
        connected: user.sourceConnected('foursquare'),
        contentTypes: [
          Ember.Object.create({
            type: 'check_in',
            name: 'Check-in',
            enabled: user.contentTypeEnabled('foursquare', 'check_in')
          }),
          Ember.Object.create({
            type: 'tip',
            name: 'Tip',
            enabled: user.contentTypeEnabled('foursquare', 'tip')
          }),
          Ember.Object.create({
            type: 'like',
            name: 'Like',
            enabled: user.contentTypeEnabled('foursquare', 'like')
          })
        ]
      }
    ));

    this.set('items', items);
  }
});
App.SourcesMenuItem = Ember.Object.extend({
  totalEnabledContentTypes: function() {
    var total = 0;
    $.each(this.get('contentTypes'), function(key, contentType) {
      if (contentType.get('enabled')) {
        total = total + 1;
      }
    });
    return total;
  }.property('this.contentTypes.@each.enabled'),
});
App.Storage = DS.Model.extend({
  type:                 DS.attr('string'),
  name:                 DS.attr('string'),
  totalSize:            DS.attr('number', { defaultValue: 0 }),
  availableSize:        DS.attr('number', { defaultValue: 0 }),
  occupiedSize:         DS.attr('number', { defaultValue: 0 }),
  otherSize:            DS.attr('number', { defaultValue: 0 }),
  lastCompletedSync:    DS.attr('date'),
  isSyncing:            DS.attr('boolean', { defaultValue: false }),
  user:                 DS.belongsTo('user'),

  availablePercentage: function() {
    return (this.get('availableSize') / this.get('totalSize') * 100);
  }.property('availableSize', 'totalSize'),

  occupiedPercentage: function() {
    return (this.get('occupiedSize') / this.get('totalSize') * 100);
  }.property('occupiedSize', 'totalSize'),

  otherPercentage: function() {
    return (this.get('otherSize') / this.get('totalSize') * 100);
  }.property('otherSize', 'totalSize'),
});

if (APP_CONFIG.DATA.FIXTURES_ENABLED.STORAGES) {
  App.Storage.FIXTURES = [
    {
      id: 1,
      type: 'dropbox',
      name: 'Dropbox',
      totalSize: 5000000000, // 5 GB
      availableSize: 2000000000, // 2 GB
      occupiedSize: 1250000000, // 1.25 GB
      otherSize: 1750000000, // 1.75 GB
      lastCompletedSync: null,
      user: 3
    }
  ];
} else {
  App.Storage.FIXTURES = [];
}
App.StorageSurvey = DS.Model.extend({
	email:   			DS.attr('string'),
	preference: 	DS.attr('string'),

	isSubmitted: function() {
		if (this.get('id'));
	}.property('id'),

	validation: {
		email: {
			pattern: 		'[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}',
			required: 	true
		},
		preference: {
			pattern: 		'.{3,}',
			required: 	true
		}
	}
});

if (APP_CONFIG.DATA.FIXTURES_ENABLED.STORAGE_SURVEYS) {
  App.StorageSurvey.FIXTURES = [
    {
      id:         2,
      email:      'example@example.com',
      preference: 'Amazon S3'
    }
  ];
} else {
  App.StorageSurvey.FIXTURES = [];
}
App.User = DS.Model.extend({
  name:       DS.attr('string'),
  email:      DS.attr('string'),
  storages:   DS.hasMany('storage', { async: true }),
  sources:    DS.hasMany('source', { async: true }),

  totalStorages: function() {
    return this.get('storages.length');
  }.property('storages.length'),

	hasStorage: function() {
		return this.get('totalStorages') ? true : false;
	}.property('totalStorages'),

  totalSources: function() {
    return this.get('sources.length');
  }.property('sources.length'),

  hasSource: function() {
    return this.get('totalSources') ? true : false;
  }.property('totalSources'),

  sourceConnected: function(type) {
    return (this.get('sources').filter(function(source) { 
      return (source.get('type') == type); 
    }).length) ? true : false;
  },

  totalContentTypes: function() {
    var total = 0;

    this.get('sources').forEach(function(source) {
      total += source.get('totalContentTypes');
    });

    return total;
  }.property('sources.@each.totalContentTypes'),

  hasContentType: function() {
    return this.get('totalContentTypes') ? true : false;
  }.property('totalContentTypes'),

  contentTypeEnabled: function(sourceType, contentTypeType) {
    return (this.get('sources').filter(function(source) {
      if (source.get('type') == sourceType) { 
        return (source.get('contentTypes').filter(function(contentType) {
          return (contentType.get('type') == contentTypeType);
        }).length) ? true : false; 
      } else {
        return false;
      }
    }).length) ? true : false;
  },

  deleteSources: function() {
    var sources = this.get('sources');
    var i = sources.get('length');

    while(i--) {
      var source = sources.objectAt(i);
      var contentTypes = source.get('contentTypes');
      var k = contentTypes.get('length');

      while(k--) {
        contentTypes.objectAt(k).destroyRecord();
      };

      source.destroyRecord();
    };

    this.set('sources', []);
  }
});

if (APP_CONFIG.DATA.FIXTURES_ENABLED.USERS) {
  App.User.FIXTURES = [
    {
      id: 3,
      name: 'Saul Goodman',
      email: 'saul@bettercallsaul.com'
    }
  ];

  if (APP_CONFIG.DATA.FIXTURES_ENABLED.STORAGES) {
    App.User.FIXTURES[0].storages = [1];
  }

  if (APP_CONFIG.DATA.FIXTURES_ENABLED.SOURCES) {
    App.User.FIXTURES[0].sources = [4,5];
  }
} else {
  App.User.FIXTURES = [];
}
App.ApplicationController = Ember.Controller.extend({
  needs: ['session'],

  sessionUser: function() {
    return this.get('controllers.session.user');
  }.property('controllers.session.user'),

  indexSelected: function() {
    return this.isSelected('index');
  }.property('currentPath', 'targetPath'),

  sourcesSelected: function() {
    return this.isSelected('sources');
  }.property('currentPath', 'targetPath'),

  syncSelected: function() {
    return this.isSelected('sync');
  }.property('currentPath', 'targetPath'),

  isSelected: function(path) {
    return this.get('currentPath') == path || this.get('targetPath') == path;
  },

  handleTransitionStart: function() {
    this.startLoadingIndicator();
  },

  handleTransitionStop: function() {
    this.stopLoadingIndicator();
  },

  startLoadingIndicator: function() {
    $('#app-loading-indicator').show(500);
  },

  stopLoadingIndicator: function() {
    $('#app-loading-indicator').hide(500);
  }
});
App.IndexController = Ember.ObjectController.extend({
  needs: ['session'],

  toggleDropboxLabel: function() {
    if (this.get('hasStorage')) {
      return '&#10003; Connected';
    } else {
      return 'Connect Dropbox';
    }
  }.property('hasStorage'),

  hasStorage: function() {
    return this.get('controllers.session.user.storages.length') ? true : false;
  }.property('controllers.session.user.storages')
});
App.SessionController = Ember.Controller.extend({
  user: null,

  authenticate: function() {
    return this.register();
  },

  deauthenticate: function() {
    this.get('user').destroyRecord();
    this.set('user', null);
  },

  register: function() {
    var controller = this;

    var user = this.store.createRecord('user', {
      id: 3,
      name: 'Saul Goodman',
      email: 'saul@bettercallsaul.com'  
    });

    return user.save().then(function(user) {
      controller.set('user', user);

      var storage = controller.store.createRecord('storage', {
        type: 'dropbox',
        name: 'Dropbox',
        totalSize: 5000000000, // 5 GB
        availableSize: 3250000000, // 2 GB
        occupiedSize: 0,
        otherSize: 1750000000, // 1.75 GB
        user: user
      });

      return storage.save().then(function(storage) {
        user.get('storages').addObject(storage);
        return user;
      });
    });
  },

  deleteUser: function() {
    this.get('user').deleteRecord();
    this.deauthenticate();
  }
});
App.SourcesController = Ember.ObjectController.extend({
  needs: 'session',
  isSaving: null,

  hasEnabledContentType: function() {
    return (this.get('model.totalEnabledContentTypes')) ? true : false;
  }.property('model.totalEnabledContentTypes'),

  isDisabled: function() {
    if (!this.get('controllers.session.user.hasSource')) {
      return (!this.get('model.totalEnabledContentTypes') || this.get('isSaving'));
    } else {
      return (!this.get('model.totalEnabledContentTypes') || this.get('isSaving') || !this.get('model.isDirty'));
    }
  }.property('totalEnabledContentTypes', 'isSaving', 'model.isDirty'),

  saveLabel: function() {
    if (!this.get('controllers.session.user.hasSource')) {
      if (this.get('isSaving')) {
          return 'Loading...';
      } else {
          return 'Start Backing Up';
      }
    } else {
      if (this.get('isSaving')) {
          return 'Saving...';
      } else {
          return 'Save Changes';
      }
    }
  }.property('isSaving'),

  saveItem: function(item) {
    var deferred = $.Deferred();
    var user = this.get('controllers.session.user');

    var source = this.store.createRecord('source', {
      type: item.get('type'),
      name: item.get('name'),
      user: user
    });

    var controller = this;
    source.save().then(function(source) {
      item.set('source', source);
      user.get('sources').pushObject(source);

      controller.saveItemContentTypes(item).then(function() {
        deferred.resolve();
      });
    });

    return deferred.promise();
  },

  saveItemContentTypes: function(item) {
    var deferred = $.Deferred();
    var promises = [];
    var controller = this;

    $.each(item.get('contentTypes'), function(key, itemContentType) {
      if (itemContentType.get('enabled')) {
        var contentType = controller.store.createRecord('contentType', {
          type:   itemContentType.get('type'),
          name:   itemContentType.get('name'),
          source: item.get('source')
        });

        var deferredContentType = $.Deferred();

        contentType.save().then(function() {
          item.get('source.contentTypes').pushObject(contentType);
          deferredContentType.resolve();
        });

        promises.push(deferredContentType.promise());
      }
    });

    $.when.apply($, promises).then(function(schemas) {
      deferred.resolve();
    });

    return deferred.promise();
  },

  userHasNoSource: function() {
    return this.get('controllers.session.user.hasSource') ? false : true;
  }.property('controllers.session.user.hasSource'),

  actions: {
    saveItems: function() {
      this.get('controllers.session.user').deleteSources();
      this.set('isSaving', true);

      var items = this.get('model.items');
      var controller = this;
      var promises = [];

      $.each(items, function(key, item) {
        if (item.get('connected')) {
          promises.push(controller.saveItem(item));
        }
      });

      $.when.apply($, promises).then(function() {
        return controller.get('controllers.session.user').save();
      }).then(function() {
        controller.transitionToRoute('sync').then(function() {
          controller.set('isSaving', false);
        });
      });
    }
  }
});
App.SyncController = Ember.ObjectController.extend({
  needs: 'session',

  refreshSources: function() {
    this.get('controllers.session').get('user.sources').forEach(function(source) {
      source.get('contentTypes').forEach(function(contentType) {
        contentType.reload();
      });
    });
  },

  refreshStorages: function() {
    this.get('controllers.session').get('user.storages').forEach(function(storage) {
      storage.reload();
    });
  }
});
App.SourcesItemView = Ember.View.extend({
  templateName: 'sources_item',
  tagName: 'tr',
  classNameBindings: ['item.connected'],

  connectLabel: function() {
    if (this.get('item.connected')) {
      return '&#10003; Connected';
    } else {
      return 'Connect';
    }
  }.property('item.connected'),

  actions: {
    toggleConnection: function() {
      if (this.get('controller.isSaving')) {
        return;
      }

      if (this.get('item.connected')) {
        if (!confirm('Are you sure you want to disconnect ' + this.get('item.name') + '?')) {
          return false;
        }
        
        this.get('item').set('connected', false);

        $.each(this.get('item.contentTypes'), function(key, contentType) {
          contentType.set('enabled', false);
        });
      } else {
        this.get('item').set('connected', true);

        $.each(this.get('item.contentTypes'), function(key, contentType) {
          contentType.set('enabled', true);
        });
      }
    }
  }
})
App.SourcesItemContentTypeView = Ember.View.extend({
	tagName: 'li',
  templateName: 'sources_item_content_type',

  isDisabled: function() {
    return (!this.get('item.connected'));
  }.property('item.connected'),

  change: function() {
    this.get('controller.model').set('isDirty', true);
  }.observes('item.connected')
})
App.StorageSurveyView = Ember.View.extend({
  templateName: 'storage_survey',
  tagName: 'form',
  isSubmitting: null,
  classNameBindings: ['isSubmitted'],

  isSubmitted: function() {
    return this.get('storageSurvey.isSubmitted');
  }.property('storageSurvey.isSubmitted'),

  isValid: function() {
    var validation = this.get('storageSurvey.validation');
    var isValid = true;
    var regex;

    // Email
    regex = new RegExp(validation.email.pattern);
    if ((validation.email.required && !this.get('storageSurvey.email')) || !regex.test(this.get('storageSurvey.email'))) {
      isValid = false;
    }

    // Preference
    regex = new RegExp(validation.preference.pattern, validation.preference.modifiers);
    if ((validation.preference.required && !this.get('storageSurvey.preference')) || !regex.test(this.get('storageSurvey.preference'))) {
      isValid = false;
    }

    return isValid;
  }.property('storageSurvey.email', 'storageSurvey.preference'),

  isDisabled: function() {
    return (!this.get('isValid') || this.get('isSubmitting'));
  }.property('isValid', 'isSubmitting'),

  submitLabel: function() {
    if (this.get('isSubmitting')) {
      return 'Submitting...';
    } else if (this.get('storageSurvey.isSubmitted')) {
      return '&#10003; Submitted';
    } else {
      return 'Notify Me';
    }
  }.property('isSubmitting', 'storageSurvey.isSubmitted'),

  actions: {
    submit: function(event) {
      $('#storage-survey').find('input').blur();
      this.set('isSubmitting', true);
      target = this;

      this.get('storageSurvey').save().then(
        function(response) {
          target.set('isSubmitting', false);
          target.get('storageSurvey').set('isSubmitted', true);
        }, 
        function(reason) {
          target.set('isSubmitting', false);
          $("#storage-survey form").effect('shake', { distance: 15 });
        }
      );
    }
  }
});
App.SyncSectionView = Ember.View.extend({
  toggleSpinner: function() {
    if (this.get('isSyncing')) {
      if (!this.get('spinner')) {
        var options = { lines: 11, length: 3, width: 2, radius: 2, color: '#a7b4c1', speed: 1.5, top: '-4', left: '2' };
        var target = $('#' + this.get('elementId')).find('.sync-section-header-info-syncing');
        var spinner = new Spinner(options).spin();
        target.append(spinner.el);
        this.set('spinner', spinner);
      }
    } else if (this.get('spinner')) {
      this.get('spinner').stop();
      $(this.get('spinner').el).remove();
      this.set('spinner', null);
    }
  }.observes('isSyncing'),

  timestamp: function(value) {
    if (!value) {
      return null;
    } else if (value == 'Never') {
      return 'Never';
    }

    // add code for formatting value
  }
});
App.SyncSourceView = App.SyncSectionView.extend({
  templateName: 'sync_source',

  totalItemsSynced: function() {
    var total = 0;

    this.get('source.contentTypes').forEach(function(contentType) {
      if (contentType.get('totalItemsSynced')) {
        total = total + contentType.get('totalItemsSynced');
      }
    });

    return total;
  }.property('source.contentTypes.@each.totalItemsSynced'),

  totalItemsAvailable: function() {
    var total = 0;

    this.get('source.contentTypes').forEach(function(contentType) {
      if (contentType.get('totalItemsAvailable')) {
        total = total + contentType.get('totalItemsAvailable');
      }
    });

    return total;
  }.property('source.contentTypes.@each.totalItemsAvailable'),

  hasTotalItems: function() {
    return (this.get('totalItemsSynced') && this.get('totalItemsAvailable'));
  }.property('totalItemsSynced', 'totalItemsAvailable'),

  percentageItemsSynced: function() {
    if (this.get('totalItemsSynced') && this.get('totalItemsAvailable')) {
      return Math.round(this.get('totalItemsSynced') / this.get('totalItemsAvailable') * 100) + '%';
    } else {
      return null;
    }
  }.property('totalItemsSynced', 'totalItemsAvailable'),

  totalContentTypesSyncing: function() {
    var total = 0;

    this.get('source.contentTypes').forEach(function(contentType) {
      if (contentType.get('isSyncing')) {
        total = total + 1;
      }
    });

    return total;
  }.property('source.contentTypes.@each.isSyncing'),

  isSyncing: function() {
    return (this.get('totalContentTypesSyncing') > 0);
  }.property('totalContentTypesSyncing'),

  lastCompletedSyncTimestamp: function() {
    return this.timestamp(this.get('source.lastCompletedSync'));
  }.property('source.lastCompletedSync')
})
App.SyncSourceContentTypeBarView = Ember.View.extend({
  templateName: 'sync_source_content_type_bar',
  attributeBindings: ['style'],

  style: function() {
    var percentage = 0;

    if (this.get('contentType.totalItemsAvailable')) {
      percentage = Math.round(this.get('contentType.totalItemsAvailable') / this.get('parentView.totalItemsAvailable') * 100);
    }

    return 'width: ' + percentage + '%';
  }.property('contentType.totalItemsAvailable', 'parentView.totalItemsAvailable'),

  barFilledStyle: function() {
    var percentage = 0;

    if (this.get('contentType.totalItemsSynced')) {
      percentage = Math.ceil(this.get('contentType.totalItemsSynced') / this.get('contentType.totalItemsAvailable') * 100);
    }
    
    return 'width: ' + percentage + '%';
  }.property('contentType.totalItemsSynced', 'contentType.totalItemsAvailable')
});
App.SyncSourceContentTypeLegendView = Ember.View.extend({
  tagName: 'li',
  templateName: 'sync_source_content_type_legend',
  attributeBindings: ['style'],

  style: function() {
    if (!this.get('contentType.totalItemsAvailable')) {
      return 'opacity: 0.5';
    }
  }.property('contentType.totalItemsAvailable'),

  totalItemsSynced: function() {
    if (this.get('contentType.totalItemsSynced') >= 0) {
      return this.get('contentType.totalItemsSynced');
    } else {
      return 'N/A';
    }
  }.property('contentType.totalItemsSynced'),

  totalItemsAvailable: function() {
    if (this.get('contentType.totalItemsAvailable') >= 0) {
      return this.get('contentType.totalItemsAvailable');
    } else {
      return 'N/A';
    }
  }.property('contentType.totalItemsAvailable'),

  hasTotalItemsAvailable: function() {
    return (this.get('contentType').get('totalItemsAvailable'));
  }.property('contentType.totalItemsAvailable'),

  hasTotalItemsSynced: function() {
    return (this.get('contentType').get('totalItemsSynced'));
  }.property('contentType.totalItemsSynced'),

  syncedPercentage: function() {
    if (this.get('contentType.totalItemsSynced') && this.get('contentType.totalItemsAvailable')) {
      return Math.round(this.get('contentType.totalItemsSynced') / this.get('contentType.totalItemsAvailable') * 100) + '%';
    } else {
      return 'N/A';
    }
  }.property('contentType.totalItemsSynced', 'contentType.totalItemsAvailable')
});
App.SyncStorageView = App.SyncSectionView.extend({
  templateName: 'sync_storage',

  isSyncing: function() {
    return this.get('storage.isSyncing');
  }.property('storage.isSyncing'),

  /* Sizes */

  size: function(value) {
    if (value == 0) {
      formattedValue = '0 MB';
    } else if (value < 1000000000) {
      formattedValue = Math.round(value / 1000000).toLocaleString('en') + ' MB';
    } else if (value) {
      formattedValue = (value / 1000000000).toFixed(2) + ' GB';
    } else {
      formattedValue = 'N/A';
    }

    return formattedValue;
  },

  availableSize: function() {
    return this.size(this.get('storage.availableSize'));
  }.property('storage.availableSize'),

  filledSize: function() {
    return this.size(this.get('storage.totalSize') - this.get('storage.availableSize'));
  }.property('storage.availableSize', 'storage.totalSize'),

  totalSize: function() {
    return this.size(this.get('storage.totalSize'));
  }.property('storage.totalSize'),

  occupiedSize: function() {
    return this.size(this.get('storage.occupiedSize'));
  }.property('storage.occupiedSize'),

  otherSize: function() {
    return this.size(this.get('storage.otherSize'));
  }.property('storage.otherSize'),

  /* Percentages */

  percentage: function(value) {
    if (value && this.get('storage.totalSize')) {
      return (Math.round(value / this.get('storage.totalSize') * 100 * 100) / 100).toFixed(2) + '%';
    } else if (value === 0) {
      return '0%';
    } else {
      return 'N/A';
    }
  },

  availablePercentage: function() {
    return this.percentage(this.get('storage.availableSize'));
  }.property('storage.availableSize', 'storage.totalSize'),

  filledPercentage: function() {
    return this.percentage(this.get('storage.totalSize') - this.get('storage.availableSize'));
  }.property('storage.availableSize', 'storage.totalSize'),

  occupiedPercentage: function() {
    return this.percentage(this.get('storage.occupiedSize'));
  }.property('storage.occupiedSize', 'storage.totalSize'),

  otherPercentage: function() {
    return this.percentage(this.get('storage.otherSize'));
  }.property('storage.otherSize', 'storage.totalSize'),

  lastCompletedSyncTimestamp: function() {
    return this.timestamp(this.get('storage.lastCompletedSync'));
  }.property('storage.lastCompletedSync'),

  /* Bar Width Styles */

  availableBarWidthStyle: function() {
    return 'width: ' + this.get('availablePercentage') + '%';
  }.property('this.availablePercentage'),

  occupiedBarWidthStyle: function() {
    return 'width: ' + this.get('occupiedPercentage') + '%';
  }.property('this.occupiedPercentage'),

  otherBarWidthStyle: function() {
    return 'width: ' + this.get('otherPercentage') + '%';
  }.property('this.otherPercentage')
})
Ember.TextField.reopen({
	attributeBindings: ['spellcheck', 'autocomplete', 'pattern', 'required']
});
App.ApplicationRoute = Ember.Route.extend({
  actions: {
    goToIndex: function() {
      this.transitionTo('index');
    },

    goToSources: function() {
      this.transitionTo('sources');
    },

    goToSync: function() {
      this.transitionTo('sync');
    },

    signIn: function() {
      var route = this;
      this.controllerFor('session').authenticate().then(function(user) {
        if (!user.get('hasSource')) {
          route.transitionTo('sources');
        } else {
          route.transitionTo('sync');
        }
      });
    },

    signOut: function() {
      this.controllerFor('session').deauthenticate();
      this.transitionTo('index');
    }
  }
});
App.IndexRoute = Ember.Route.extend({
  model: function() {
    var store = this.store;
    return this.store.find('storageSurvey').then(function(storageSurveys) {
      if (Ember.isEmpty(storageSurveys)) {
        return store.createRecord('storageSurvey');
      } else {
        return storageSurveys.get('firstObject');
      }
    });
  },

  actions: {
    toggleDropbox: function() {
      if (!this.controllerFor('session').get('user.hasStorage')) {
        var route = this;
        this.controllerFor('session').authenticate().then(function() {
          route.transitionTo('sources')
        });
      } else {
        if(confirm("Are you sure you want to disconnect Dropbox?\n\nNone of the content you've already backed up will be affected in the process, but all of your Asheville settings (such as connections to social networks and their respective content types) will be deleted permanently.")) {
          return this.controllerFor('session').deleteUser();
        }
      }
    }
  }
});
App.SourcesRoute = Ember.Route.extend({
  needs: ['session'],

  beforeModel: function() {
    var sessionUser = this.controllerFor('session').get('user');
    
    if (!sessionUser) {
      this.transitionTo('index');
    }
  },

  model: function() {
    return App.SourcesMenu.create({ user: this.controllerFor('session').get('user') });
  }
});
App.SyncRoute = Ember.Route.extend({
  needs: ['session'],
  
  beforeModel: function() {
    var sessionUser = this.controllerFor('session').get('user');

    if (!sessionUser) {
      this.transitionTo('index');
    } else if(!sessionUser.get('hasSource')) {
      this.transitionTo('sources');
    }
  },

  model: function() {
    return this.controllerFor('session').get('user');
  },

  setupController: function(controller, model) {
    if (!this.get('updateRefreshInterval')) {
      var updateRefreshInterval = window.setInterval(function() {
        controller.refreshSources();
        controller.refreshStorages();
      }, 1000);
      
      this.set('updateRefreshInterval', updateRefreshInterval);
    }

    if (!this.get('serverSimulationRefreshInterval')) {
      var serverSimulationRefreshInterval = window.setInterval(function() {
        controller.simulateUpdate();
      }, 1600);
      
      this.set('serverSimulationRefreshInterval', serverSimulationRefreshInterval);
    }

    controller.set('model', model);
  }
});
Ember.Handlebars.registerBoundHelper('conditionalPluralize', function(number, opts) {
  var single = opts.hash['s'];
  Ember.assert('pluralize requires a singular string (s)', single);
  var plural = opts.hash['p'] || single + 's';
  return (number == 1) ? single : plural;
});

Ember.Handlebars.registerBoundHelper('pluralize', function(string, opts) {
  return string + 's';
});
if (APP_CONFIG.SIMULATIONS_ENABLED) {
  App.SyncController.reopen({
    simulateUpdate: function() {
      var lastUpdatedSource;
      var totalSyncingSources = 0;

      for (var i = 0; i < App.ContentType.FIXTURES.length; i++) {
        if (!App.ContentType.FIXTURES[i]['totalItemsAvailable']) {
          App.ContentType.FIXTURES[i]['totalItemsAvailable'] = Math.getRandomInt(10, 5000);
        }

        if (lastUpdatedSource != App.ContentType.FIXTURES[i]['source'] && App.ContentType.FIXTURES[i]['totalItemsSynced'] < App.ContentType.FIXTURES[i]['totalItemsAvailable']) {
          totalSyncingSources = totalSyncingSources + 1;

          // Update content type
          var contentTypeIncrement = Math.getRandomInt(1, 100);

          if (App.ContentType.FIXTURES[i]['totalItemsSynced'] + contentTypeIncrement > App.ContentType.FIXTURES[i]['totalItemsAvailable']) {
            contentTypeIncrement = App.ContentType.FIXTURES[i]['totalItemsAvailable'] - App.ContentType.FIXTURES[i]['totalItemsSynced'];
          }

          App.ContentType.FIXTURES[i]['totalItemsSynced'] = App.ContentType.FIXTURES[i]['totalItemsSynced'] + contentTypeIncrement;
          
          if (contentTypeIncrement > 0) {
            App.ContentType.FIXTURES[i]['isSyncing'] = true;
          }

          lastUpdatedSource = App.ContentType.FIXTURES[i]['source'];

          // Update storage
          var storageIncrement = Math.getRandomInt(1000, 1000000);
          
          if (App.Storage.FIXTURES[0]['occupiedSize'] + storageIncrement > App.Storage.FIXTURES[0]['totalSize']) {
            storageIncrement = App.Storage.FIXTURES[0]['totalSize'] - App.Storage.FIXTURES[0]['occupiedSize'];
          }

          App.Storage.FIXTURES[0]['occupiedSize'] = App.Storage.FIXTURES[0]['occupiedSize'] + storageIncrement;

           if (storageIncrement > 0) {
            App.Storage.FIXTURES[0]['isSyncing'] = true;
          } else {
            App.Storage.FIXTURES[0]['isSyncing'] = false;
          }
        } else {
          App.ContentType.FIXTURES[i]['isSyncing'] = false;
        }
      }

      // Determine storage syncing status
      if (totalSyncingSources > 0) {
        App.Storage.FIXTURES[0]['isSyncing'] = true;
      } else {
        App.Storage.FIXTURES[0]['isSyncing'] = false;
      }
    },
    
    actions: {
      /* Client-Side */

      simulateOccupiedSizeIncrease: function(view) {
        view.get('storage').simulateOccupiedSizeIncrease();
      },
      simulateTotalSizeIncrease: function(view) {
        view.get('storage').simulateTotalSizeIncrease();
      },
      simulateOtherSizeIncrease: function(view) {
        view.get('storage').simulateOtherSizeIncrease();
      },
      simulateOccupiedSizeDecrease: function(view) {
        view.get('storage').simulateOccupiedSizeDecrease();
      },
      simulateTotalSizeDecrease: function(view) {
        view.get('storage').simulateTotalSizeDecrease();
      },
      simulateOtherSizeDecrease: function(view) {
        view.get('storage').simulateOtherSizeDecrease();
      },
      simulateContentTypeIncrease: function(view) {
        view.get('contentType').simulateIncrease();
      },
      simulateContentTypeDecrease: function(view) {
        view.get('contentType').simulateDecrease();
      }
    }
  });
}
if (APP_CONFIG.SIMULATIONS_ENABLED) {
  App.ContentType.reopen({
    simulationChangeIncrement: 10,

    simulateIncrease: function() {
      var increase = this.get('simulationChangeIncrement');

      if (!this.get('totalItemsSynced')) {
        this.set('totalItemsSynced', 0);
      }

      if (this.get('totalItemsSynced') + increase > this.get('totalItemsAvailable')) {
        increase = this.get('totalItemsAvailable') - this.get('totalItemsSynced');
      }

      this.set('totalItemsSynced', this.get('totalItemsSynced') + increase);
    },

    simulateDecrease: function() {
      var decrease = this.get('simulationChangeIncrement');

      if (this.get('totalItemsSynced') - decrease <= 0) {
        decrease = this.get('totalItemsSynced');
      }

      this.set('totalItemsSynced', this.get('totalItemsSynced') - decrease);
    }
  });
}
if (APP_CONFIG.SIMULATIONS_ENABLED) {
  App.Storage.reopen({
    simulationChangeIncrement: 250000000,

    simulateOccupiedSizeIncrease: function() {
      var increase = this.get('simulationChangeIncrement');

      if (this.get('occupiedSize') + this.get('otherSize') + increase > this.get('totalSize')) {
        increase = this.get('totalSize') - this.get('occupiedSize') - this.get('otherSize');
      }

      this.set('occupiedSize', this.get('occupiedSize') + increase);
      this.set('availableSize', this.get('availableSize') - increase);
    },

    simulateOccupiedSizeDecrease: function() {
      var decrease = this.get('simulationChangeIncrement');

      if (this.get('occupiedSize') - decrease <= 0) {
        decrease = this.get('occupiedSize');
      }

      this.set('occupiedSize', this.get('occupiedSize') - decrease);
      this.set('availableSize', this.get('availableSize') + decrease);
    },

    simulateTotalSizeIncrease: function() {
      this.set('totalSize', this.get('totalSize') + this.get('simulationChangeIncrement'));
      this.set('availableSize', this.get('availableSize') + this.get('simulationChangeIncrement'));
    },

    simulateTotalSizeDecrease: function() {
      if (this.get('totalSize') - this.get('simulationChangeIncrement') >= this.get('otherSize') + this.get('occupiedSize')) {
        this.set('totalSize', this.get('totalSize') - this.get('simulationChangeIncrement'));
        this.set('availableSize', this.get('availableSize') - this.get('simulationChangeIncrement'));
      }
    },

    simulateOtherSizeIncrease: function() {
      var increase = this.get('simulationChangeIncrement');

      if (this.get('occupiedSize') + this.get('otherSize') + increase > this.get('totalSize')) {
        increase = this.get('totalSize') - this.get('occupiedSize') - this.get('otherSize');
      }

      this.set('otherSize', this.get('otherSize') + increase);
      this.set('availableSize', this.get('availableSize') - increase);
    },

    simulateOtherSizeDecrease: function() {
      var decrease = this.get('simulationChangeIncrement');

      if (this.get('otherSize') - decrease <= 0) {
        decrease = this.get('otherSize');
      }

      this.set('otherSize', this.get('otherSize') - decrease);
      this.set('availableSize', this.get('availableSize') + decrease);
    }
  });
}